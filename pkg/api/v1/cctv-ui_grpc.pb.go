// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CctvUIClient is the client API for CctvUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CctvUIClient interface {
	// ListCameraSpecs returns a list of Camera(s) that can be started through the UI.
	ListCameraSpecs(ctx context.Context, in *ListCameraSpecsRequest, opts ...grpc.CallOption) (CctvUI_ListCameraSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type cctvUIClient struct {
	cc grpc.ClientConnInterface
}

func NewCctvUIClient(cc grpc.ClientConnInterface) CctvUIClient {
	return &cctvUIClient{cc}
}

func (c *cctvUIClient) ListCameraSpecs(ctx context.Context, in *ListCameraSpecsRequest, opts ...grpc.CallOption) (CctvUI_ListCameraSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CctvUI_ServiceDesc.Streams[0], "/v1.CctvUI/ListCameraSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &cctvUIListCameraSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CctvUI_ListCameraSpecsClient interface {
	Recv() (*ListCameraSpecsResponse, error)
	grpc.ClientStream
}

type cctvUIListCameraSpecsClient struct {
	grpc.ClientStream
}

func (x *cctvUIListCameraSpecsClient) Recv() (*ListCameraSpecsResponse, error) {
	m := new(ListCameraSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cctvUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.CctvUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CctvUIServer is the server API for CctvUI service.
// All implementations must embed UnimplementedCctvUIServer
// for forward compatibility
type CctvUIServer interface {
	// ListCameraSpecs returns a list of Camera(s) that can be started through the UI.
	ListCameraSpecs(*ListCameraSpecsRequest, CctvUI_ListCameraSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedCctvUIServer()
}

// UnimplementedCctvUIServer must be embedded to have forward compatible implementations.
type UnimplementedCctvUIServer struct {
}

func (UnimplementedCctvUIServer) ListCameraSpecs(*ListCameraSpecsRequest, CctvUI_ListCameraSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCameraSpecs not implemented")
}
func (UnimplementedCctvUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedCctvUIServer) mustEmbedUnimplementedCctvUIServer() {}

// UnsafeCctvUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CctvUIServer will
// result in compilation errors.
type UnsafeCctvUIServer interface {
	mustEmbedUnimplementedCctvUIServer()
}

func RegisterCctvUIServer(s grpc.ServiceRegistrar, srv CctvUIServer) {
	s.RegisterService(&CctvUI_ServiceDesc, srv)
}

func _CctvUI_ListCameraSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCameraSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CctvUIServer).ListCameraSpecs(m, &cctvUIListCameraSpecsServer{stream})
}

type CctvUI_ListCameraSpecsServer interface {
	Send(*ListCameraSpecsResponse) error
	grpc.ServerStream
}

type cctvUIListCameraSpecsServer struct {
	grpc.ServerStream
}

func (x *cctvUIListCameraSpecsServer) Send(m *ListCameraSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CctvUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CctvUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CctvUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CctvUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CctvUI_ServiceDesc is the grpc.ServiceDesc for CctvUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CctvUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CctvUI",
	HandlerType: (*CctvUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _CctvUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCameraSpecs",
			Handler:       _CctvUI_ListCameraSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cctv-ui.proto",
}
