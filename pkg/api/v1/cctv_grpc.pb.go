// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CctvServiceClient is the client API for CctvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CctvServiceClient interface {
	// StartLocalCamera starts a Camera on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cctv/config.yaml
	//   3. all bytes constituting the Camera YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalCamera(ctx context.Context, opts ...grpc.CallOption) (CctvService_StartLocalCameraClient, error)
	// StartFromPreviousCamera starts a new Camera based on a previous one.
	// If the previous Camera does not have the can-replay condition set this call will result in an error.
	StartFromPreviousCamera(ctx context.Context, in *StartFromPreviousCameraRequest, opts ...grpc.CallOption) (*StartCameraResponse, error)
	// StartCameraRequest starts a new Camera based on its specification.
	StartCamera(ctx context.Context, in *StartCameraRequest, opts ...grpc.CallOption) (*StartCameraResponse, error)
	// Searches for Camera(s) known to this instance
	ListCameras(ctx context.Context, in *ListCamerasRequest, opts ...grpc.CallOption) (*ListCamerasResponse, error)
	// Subscribe listens to new Camera(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CctvService_SubscribeClient, error)
	// GetCamera retrieves details of a single Camera
	GetCamera(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraResponse, error)
	// Listen listens to Camera updates and log output of a running Camera
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CctvService_ListenClient, error)
	// StopCamera stops a currently running Camera
	StopCamera(ctx context.Context, in *StopCameraRequest, opts ...grpc.CallOption) (*StopCameraResponse, error)
}

type cctvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCctvServiceClient(cc grpc.ClientConnInterface) CctvServiceClient {
	return &cctvServiceClient{cc}
}

func (c *cctvServiceClient) StartLocalCamera(ctx context.Context, opts ...grpc.CallOption) (CctvService_StartLocalCameraClient, error) {
	stream, err := c.cc.NewStream(ctx, &CctvService_ServiceDesc.Streams[0], "/v1.CctvService/StartLocalCamera", opts...)
	if err != nil {
		return nil, err
	}
	x := &cctvServiceStartLocalCameraClient{stream}
	return x, nil
}

type CctvService_StartLocalCameraClient interface {
	Send(*StartLocalCameraRequest) error
	CloseAndRecv() (*StartCameraResponse, error)
	grpc.ClientStream
}

type cctvServiceStartLocalCameraClient struct {
	grpc.ClientStream
}

func (x *cctvServiceStartLocalCameraClient) Send(m *StartLocalCameraRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cctvServiceStartLocalCameraClient) CloseAndRecv() (*StartCameraResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartCameraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cctvServiceClient) StartFromPreviousCamera(ctx context.Context, in *StartFromPreviousCameraRequest, opts ...grpc.CallOption) (*StartCameraResponse, error) {
	out := new(StartCameraResponse)
	err := c.cc.Invoke(ctx, "/v1.CctvService/StartFromPreviousCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cctvServiceClient) StartCamera(ctx context.Context, in *StartCameraRequest, opts ...grpc.CallOption) (*StartCameraResponse, error) {
	out := new(StartCameraResponse)
	err := c.cc.Invoke(ctx, "/v1.CctvService/StartCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cctvServiceClient) ListCameras(ctx context.Context, in *ListCamerasRequest, opts ...grpc.CallOption) (*ListCamerasResponse, error) {
	out := new(ListCamerasResponse)
	err := c.cc.Invoke(ctx, "/v1.CctvService/ListCameras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cctvServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CctvService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CctvService_ServiceDesc.Streams[1], "/v1.CctvService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cctvServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CctvService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type cctvServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *cctvServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cctvServiceClient) GetCamera(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraResponse, error) {
	out := new(GetCameraResponse)
	err := c.cc.Invoke(ctx, "/v1.CctvService/GetCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cctvServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CctvService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &CctvService_ServiceDesc.Streams[2], "/v1.CctvService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &cctvServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CctvService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type cctvServiceListenClient struct {
	grpc.ClientStream
}

func (x *cctvServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cctvServiceClient) StopCamera(ctx context.Context, in *StopCameraRequest, opts ...grpc.CallOption) (*StopCameraResponse, error) {
	out := new(StopCameraResponse)
	err := c.cc.Invoke(ctx, "/v1.CctvService/StopCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CctvServiceServer is the server API for CctvService service.
// All implementations must embed UnimplementedCctvServiceServer
// for forward compatibility
type CctvServiceServer interface {
	// StartLocalCamera starts a Camera on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cctv/config.yaml
	//   3. all bytes constituting the Camera YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalCamera(CctvService_StartLocalCameraServer) error
	// StartFromPreviousCamera starts a new Camera based on a previous one.
	// If the previous Camera does not have the can-replay condition set this call will result in an error.
	StartFromPreviousCamera(context.Context, *StartFromPreviousCameraRequest) (*StartCameraResponse, error)
	// StartCameraRequest starts a new Camera based on its specification.
	StartCamera(context.Context, *StartCameraRequest) (*StartCameraResponse, error)
	// Searches for Camera(s) known to this instance
	ListCameras(context.Context, *ListCamerasRequest) (*ListCamerasResponse, error)
	// Subscribe listens to new Camera(s) updates
	Subscribe(*SubscribeRequest, CctvService_SubscribeServer) error
	// GetCamera retrieves details of a single Camera
	GetCamera(context.Context, *GetCameraRequest) (*GetCameraResponse, error)
	// Listen listens to Camera updates and log output of a running Camera
	Listen(*ListenRequest, CctvService_ListenServer) error
	// StopCamera stops a currently running Camera
	StopCamera(context.Context, *StopCameraRequest) (*StopCameraResponse, error)
	mustEmbedUnimplementedCctvServiceServer()
}

// UnimplementedCctvServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCctvServiceServer struct {
}

func (UnimplementedCctvServiceServer) StartLocalCamera(CctvService_StartLocalCameraServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalCamera not implemented")
}
func (UnimplementedCctvServiceServer) StartFromPreviousCamera(context.Context, *StartFromPreviousCameraRequest) (*StartCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousCamera not implemented")
}
func (UnimplementedCctvServiceServer) StartCamera(context.Context, *StartCameraRequest) (*StartCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCamera not implemented")
}
func (UnimplementedCctvServiceServer) ListCameras(context.Context, *ListCamerasRequest) (*ListCamerasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameras not implemented")
}
func (UnimplementedCctvServiceServer) Subscribe(*SubscribeRequest, CctvService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCctvServiceServer) GetCamera(context.Context, *GetCameraRequest) (*GetCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCamera not implemented")
}
func (UnimplementedCctvServiceServer) Listen(*ListenRequest, CctvService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedCctvServiceServer) StopCamera(context.Context, *StopCameraRequest) (*StopCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCamera not implemented")
}
func (UnimplementedCctvServiceServer) mustEmbedUnimplementedCctvServiceServer() {}

// UnsafeCctvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CctvServiceServer will
// result in compilation errors.
type UnsafeCctvServiceServer interface {
	mustEmbedUnimplementedCctvServiceServer()
}

func RegisterCctvServiceServer(s grpc.ServiceRegistrar, srv CctvServiceServer) {
	s.RegisterService(&CctvService_ServiceDesc, srv)
}

func _CctvService_StartLocalCamera_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CctvServiceServer).StartLocalCamera(&cctvServiceStartLocalCameraServer{stream})
}

type CctvService_StartLocalCameraServer interface {
	SendAndClose(*StartCameraResponse) error
	Recv() (*StartLocalCameraRequest, error)
	grpc.ServerStream
}

type cctvServiceStartLocalCameraServer struct {
	grpc.ServerStream
}

func (x *cctvServiceStartLocalCameraServer) SendAndClose(m *StartCameraResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cctvServiceStartLocalCameraServer) Recv() (*StartLocalCameraRequest, error) {
	m := new(StartLocalCameraRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CctvService_StartFromPreviousCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CctvServiceServer).StartFromPreviousCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CctvService/StartFromPreviousCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CctvServiceServer).StartFromPreviousCamera(ctx, req.(*StartFromPreviousCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CctvService_StartCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CctvServiceServer).StartCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CctvService/StartCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CctvServiceServer).StartCamera(ctx, req.(*StartCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CctvService_ListCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCamerasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CctvServiceServer).ListCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CctvService/ListCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CctvServiceServer).ListCameras(ctx, req.(*ListCamerasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CctvService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CctvServiceServer).Subscribe(m, &cctvServiceSubscribeServer{stream})
}

type CctvService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type cctvServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *cctvServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CctvService_GetCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CctvServiceServer).GetCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CctvService/GetCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CctvServiceServer).GetCamera(ctx, req.(*GetCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CctvService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CctvServiceServer).Listen(m, &cctvServiceListenServer{stream})
}

type CctvService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type cctvServiceListenServer struct {
	grpc.ServerStream
}

func (x *cctvServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CctvService_StopCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CctvServiceServer).StopCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CctvService/StopCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CctvServiceServer).StopCamera(ctx, req.(*StopCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CctvService_ServiceDesc is the grpc.ServiceDesc for CctvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CctvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CctvService",
	HandlerType: (*CctvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousCamera",
			Handler:    _CctvService_StartFromPreviousCamera_Handler,
		},
		{
			MethodName: "StartCamera",
			Handler:    _CctvService_StartCamera_Handler,
		},
		{
			MethodName: "ListCameras",
			Handler:    _CctvService_ListCameras_Handler,
		},
		{
			MethodName: "GetCamera",
			Handler:    _CctvService_GetCamera_Handler,
		},
		{
			MethodName: "StopCamera",
			Handler:    _CctvService_StopCamera_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalCamera",
			Handler:       _CctvService_StartLocalCamera_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _CctvService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _CctvService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cctv.proto",
}
